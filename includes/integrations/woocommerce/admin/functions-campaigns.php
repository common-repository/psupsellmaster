<?php
/**
 * Integrations - WooCommerce - Admin - Functions - Campaigns.
 *
 * @package PsUpsellMaster.
 */

// Exit if accessed directly.
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * Save a coupon for WooCommerce.
 *
 * @param array $args The coupon args.
 */
function psupsellmaster_woo_save_coupon( $args ) {
	// Get the coupon id.
	$coupon_id = isset( $args['coupon_id'] ) ? filter_var( $args['coupon_id'], FILTER_VALIDATE_INT ) : false;
	$coupon_id = false !== $coupon_id ? $coupon_id : 0;

	// Set the data.
	$data = array(
		'code'                        => '',
		'name'                        => __( 'Auto-generated by UpsellMaster', 'psupsellmaster' ),
		'description'                 => '',
		'status'                      => 'draft',
		'discount_type'               => 'percent',
		'amount'                      => '',
		'date_expires'                => null,
		'individual_use'              => false,
		'product_ids'                 => array(),
		'excluded_product_ids'        => array(),
		'usage_limit'                 => 0,
		'usage_limit_per_user'        => 0,
		'limit_usage_to_x_items'      => null,
		'free_shipping'               => false,
		'product_categories'          => array(),
		'excluded_product_categories' => array(),
		'exclude_sale_items'          => false,
		'minimum_amount'              => '',
		'maximum_amount'              => '',
		'email_restrictions'          => array(),
	);

	// Check if the code is not empty.
	if ( ! empty( $args['code'] ) ) {
		// Set the code.
		$data['code'] = $args['code'];
	}

	// Set the woo statuses.
	$woo_statuses = psupsellmaster_woo_get_coupon_statuses();

	// Check if the status is not empty.
	if ( ! empty( $args['status'] ) ) {
		// Check if the status is valid.
		if ( in_array( $args['status'], $woo_statuses, true ) ) {
			// Set the status.
			$data['status'] = $args['status'];
		}
	}

	// Set the woo types.
	$woo_types = array(
		'fixed_cart',
		'fixed_product',
		'percent',
	);

	// Check if the type is not empty.
	if ( ! empty( $args['type'] ) ) {
		// Set the type.
		$type = 'percent';

		// Check if the type is a valid woo type.
		if ( in_array( $args['type'], $woo_types, true ) ) {
			// Set the type.
			$type = $args['type'];

			// Otherwise, check if the type is valid.
		} elseif ( 'discount_fixed' === $args['type'] ) {
			// Set the type.
			$type = 'fixed_product';
		}

		// Set the type.
		$data['discount_type'] = $type;
	}

	// Check if the amount is not empty.
	if ( ! empty( $args['amount'] ) ) {
		// Get the amount.
		$amount = filter_var( $args['amount'], FILTER_VALIDATE_FLOAT );

		// Check if the amount is valid.
		if ( false !== $amount ) {
			// Set the amount.
			$data['amount'] = $args['amount'];
		}
	}

	// Get the coupon.
	$coupon = new WC_Coupon( $coupon_id );

	// Set the data.
	$coupon->set_props( $data );

	// Save the coupon.
	$coupon_id = $coupon->save();

	// Return the coupon id.
	return $coupon_id;
}

/**
 * Delete a coupon in WooCommerce.
 *
 * @param int $coupon_id The coupon id.
 */
function psupsellmaster_woo_delete_coupon( $coupon_id ) {
	// Delete the coupon.
	wp_delete_post( $coupon_id, true );
}

/**
 * Duplicate a coupon in WooCommerce.
 *
 * @param array $args The coupon args.
 * @return int The duplicate id.
 */
function psupsellmaster_woo_duplicate_coupon( $args ) {
	// Set the duplicate id.
	$duplicate_id = false;

	// Get the coupon id.
	$coupon_id = isset( $args['coupon_id'] ) ? filter_var( $args['coupon_id'], FILTER_VALIDATE_INT ) : false;

	// Check if the coupon id is empty.
	if ( empty( $coupon_id ) ) {
		// Return the duplicate id.
		return $duplicate_id;
	}

	// Get the code.
	$code = isset( $args['code'] ) ? $args['code'] : '';

	// Get the discount type.
	$discount_type = get_post_meta( $coupon_id, 'discount_type', true );

	// Get the coupon amount.
	$coupon_amount = get_post_meta( $coupon_id, 'coupon_amount', true );

	// Set the args.
	$args = array(
		'code'   => $code,
		'type'   => $discount_type,
		'amount' => $coupon_amount,
	);

	// Save the coupon.
	$duplicate_id = psupsellmaster_woo_save_coupon( $args );

	// Return the duplicate id.
	return $duplicate_id;
}

/**
 * Redirect the integrated coupon edit page to the campaign edit page in WooCommerce.
 */
function psupsellmaster_woo_maybe_redirect_integrated_coupon() {
	// Get the coupon id.
	$coupon_id = isset( $_GET['post'] ) ? filter_var( sanitize_text_field( wp_unslash( $_GET['post'] ) ), FILTER_VALIDATE_INT ) : false;

	// Check if the coupon id is empty.
	if ( empty( $coupon_id ) ) {
		return false;
	}

	// Get the coupon post type.
	$coupon_post_type = psupsellmaster_get_coupon_post_type();

	// Get the post type.
	$post_type = get_post_type( $coupon_id );

	// Check if the post type does not match.
	if ( $coupon_post_type !== $post_type ) {
		return false;
	}

	// Set the known actions.
	$known_actions = array(
		'delete',
		'edit',
		'trash',
		'untrash',
	);

	// Get the action.
	$action = isset( $_GET['action'] ) ? sanitize_text_field( wp_unslash( $_GET['action'] ) ) : false;

	// Check the action.
	if ( ! in_array( $action, $known_actions, true ) ) {
		return false;
	}

	// Get the campaign id.
	$campaign_id = psupsellmaster_get_campaign_id_by_coupon_id( $coupon_id );

	// Check if the campaign id is empty.
	if ( empty( $campaign_id ) ) {
		return false;
	}

	// Redirect to the campaign edit page.
	wp_safe_redirect( admin_url( 'admin.php?page=psupsellmaster-campaigns&view=edit&campaign=' . $campaign_id ) );

	exit;
}
